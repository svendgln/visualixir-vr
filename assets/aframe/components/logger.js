import cfg from '../config';
// logs status messages
// TODO rename other menu tabs to ..-tab
AFRAME.registerComponent('logger-tab', {
    dependencies: ['geometry'],
    init: function () {
        const dims = document.querySelector('a-scene').getBoundingClientRect();
        const el = document.querySelector('#logger-info');
        //el.setAttribute('position', `${dims.x, }`);
        window.app.Logger = new Logger(el);
    }
});
// logs node communication
AFRAME.registerComponent('tracer-tab', {
    dependencies: ['geometry'],
    init: function () {
        const dims = document.querySelector('a-scene').getBoundingClientRect();
        const el = document.querySelector('#logger-trace');
        window.app.Tracer = new Tracer(el);
    }
});

// logger just adds string to tab idk
// string generated by subclass method

export class MsgLogger {
    constructor(container) {
        this.maxMessages = cfg.maxMessages;
        this.messages = new Array();
        this.window = 0;
        this.wSize = 3;
        // sliding window type shit
        // use window and size to slice msgs from array
    }

    addMsg(msg) {
        console.log(msg);
        //this.messages.unshift(msg);
        // do some rerender shit
    }

    render() {
        // add messages in window to container
    }

    // probs do some scroll shit
}
// log one / 2
export class Logger extends MsgLogger {
    // all nodes
    static types = new Map(
        Object.entries({
            'spawn': 'spawned on',
            'exit': 'exited on',
            'link': 'linked with',
            'unlink': 'unlinked from'
        })
    );
    constructor (container) {
        super(container);
        
    }

    logOne(process, type) {
        const name = process.name;
        const action = Logger.types.get(type);
        const node = process.node;
        console.log(name, action, node);
    }

    logTwo(from, to, type) {
        console.log(from.name, Logger.types.get(type), to.name);
    }
}
// log 2
export class Tracer extends MsgLogger {
    // selected nodes
    constructor (container) {
        super(container);
        this.selected = new Map(); // idk map maybe..
    }

    logMessage(from, to, msg) {
        console.log(from.name + '->' + to.name + ': ' + msg);
    }
    // this shite even needed?
    // dont need to store traced nodes here..
    // selecting done in graph onclick
    select() { // traced component..

    }

    remove() {

    }
}